from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove

from Cakeshop_Euphoria_Bot.main import dp, bot, db
from Cakeshop_Euphoria_Bot.filters import IsAdmin
from aiogram import types
from Cakeshop_Euphoria_Bot.keyboards import *
from Cakeshop_Euphoria_Bot.config import ADMINS
from Cakeshop_Euphoria_Bot.states import states


@dp.callback_query_handler(text='admin')
async def admin_menu(callback: types.CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id in ADMINS:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
                                      reply_markup=inline.ikb.get_admin_menu_ikb())
        await callback.answer()
    else:
        await callback.answer(text="–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é, —Ç—ã –Ω–µ –º–æ–π –∞–¥–º–∏–Ω—É—à–∫–∞! üò°", show_alert=True)


@dp.callback_query_handler(IsAdmin(), text='client_list')
async def show_client_list(callback: types.CallbackQuery) -> None:
    data = db.fetchall("SELECT * FROM clients")
    print(data)
    for index, client in enumerate(data):
        if index != len(data) - 1:
            await callback.message.answer(f"–ò–º—è: {client[1]}\n"
                                          f"–§–∞–º–∏–ª–∏—è: {client[2]}\n"
                                          f"–¢–µ–ª–µ—Ñ–æ–Ω: {client[3]}\n"
                                          f"email: {client[4]}\n"
                                          f"client_id: {client[5]}")
        else:
            await callback.message.answer(f"–ò–º—è: {client[1]}\n"
                                          f"–§–∞–º–∏–ª–∏—è: {client[2]}\n"
                                          f"–¢–µ–ª–µ—Ñ–æ–Ω: {client[3]}\n"
                                          f"email: {client[4]}\n"
                                          f"client_id: {client[5]}",
                                          reply_markup=inline.ikb.go_to_main_menu_ikb())
    await callback.answer()





@dp.callback_query_handler(IsAdmin(), text='order_list')
async def show_order_list(callback: types.CallbackQuery) -> None:
    data = db.fetchall("SELECT * FROM orders")
    print(data)
    for index, client in enumerate(data):

        if client[9] == 0:
            status = "–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        else:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"

        if index != len(data) - 1:
            await callback.message.answer(f"*{client[1]}*\n"
                                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {client[2]}\n"
                                          f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {client[3]}\n"
                                          f"–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {client[4]}\n"
                                          f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {client[5]}\n"
                                          f"–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {client[6]}\n"
                                          f"–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {client[7]}\n"
                                          f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {client[8]} —Ä—É–±.\n"
                                          f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: *{status}*",
                                          parse_mode='Markdown')
        else:
            await callback.message.answer(f"*{client[1]}*\n"
                                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {client[2]}\n"
                                          f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {client[3]}\n"
                                          f"–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {client[4]}\n"
                                          f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {client[5]}\n"
                                          f"–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {client[6]}\n"
                                          f"–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {client[7]}\n"
                                          f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {client[8]} —Ä—É–±.\n"
                                          f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: *{status}*",
                                          parse_mode='Markdown',
                                          reply_markup=inline.ikb.go_to_main_menu_ikb())
    await callback.answer()


@dp.message_handler(IsAdmin(), text=['–û—Ç–º–µ–Ω–∞'], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await message.delete()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                         reply_markup=inline.ikb.get_start_ikb())
    await state.finish()


@dp.callback_query_handler(IsAdmin(), text='add_products')
async def add_product_process(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞",
                                  reply_markup=reply.kb.cancel_add_kb())
    await states.ProductState.title.set()


@dp.message_handler(IsAdmin(), state=states.ProductState.title)
async def load_title(message: types.Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(title=message.text.title())
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:')
    await states.ProductState.next()


@dp.message_handler(IsAdmin(), state=states.ProductState.ingredients)
async def load_ingredients(message: types.Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(ingredients=message.text.capitalize())
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:')
    await states.ProductState.next()


@dp.message_handler(lambda message: not message.photo, state=states.ProductState.photo)
async def check_photo(message: types.Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!", reply_markup=reply.kb.cancel_add_kb())


@dp.message_handler(IsAdmin(), state=states.ProductState.photo, content_types=['photo'])
async def load_photo(message: types.Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    photo = message.photo[0].file_id
    await state.update_data(photo=photo)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:')
    await states.ProductState.next()


@dp.message_handler(IsAdmin(), state=states.ProductState.price)
async def load_price(message: types.Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω—ã –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(price=int(message.text))
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:')
    await states.ProductState.next()


@dp.message_handler(IsAdmin(), state=states.ProductState.quantity)
async def load_quantity(message: types.Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(quantity=int(message.text))
    await message.answer('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (–¥–∞/–Ω–µ—Ç):')
    await states.ProductState.next()


@dp.message_handler(IsAdmin(), state=states.ProductState.confirm)
async def load_cofirm(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    if message.text.lower() == '–¥–∞':
        await state.update_data(confirm=True)
    elif message.text.lower() == '–Ω–µ—Ç':
        await state.update_data(confirm=False)

    data = await state.get_data()
    await state.finish()

    db.query(
        "INSERT INTO production (title, ingredients, photo, price, quantity, confirm) VALUES (?, ?, ?, ?, ?, ?)",
        (data['title'], data['ingredients'], data['photo'], data['price'], data['quantity'],
         data['confirm']))

    await message.answer("–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
                         reply_markup=ReplyKeyboardRemove())
    await bot.send_photo(chat_id=message.from_user.id, photo=data['photo'],
                         caption=f"*{data['title']}*\n"
                                 f"–°–æ—Å—Ç–∞–≤: {data['ingredients']}\n"
                                 f"–¶–µ–Ω–∞: {data['price']}\n"
                                 f"–û—Å—Ç–∞—Ç–æ–∫: {data['quantity']}\n"
                                 f"–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ: {'–¥–∞' if data['confirm'] == 1 else '–Ω–µ—Ç'}",
                         parse_mode='Markdown',
                         reply_markup=inline.ikb.get_start_ikb())


async def show_all_products(callback: types.CallbackQuery, products: list):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    for item in products:
        await bot.send_photo(chat_id=callback.message.chat.id, photo=item[3],
                             caption=f"*{item[1]}*\n"
                                     f"–°–æ—Å—Ç–∞–≤: {item[2]}\n"
                                     f"–¶–µ–Ω–∞: {item[4]} —Ä—É–±.\n"
                                     f"–û—Å—Ç–∞—Ç–æ–∫: {item[5]}\n"
                                     f"–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ: {'–¥–∞' if item[6] == 1 else '–Ω–µ—Ç'}",
                             parse_mode='Markdown',
                             reply_markup=inline.ikb.get_delete_update_ikb(item[0]))
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
                                  reply_markup=inline.ikb.go_to_main_menu_ikb())


@dp.callback_query_handler(IsAdmin(),
                           inline.ikb.products_correct_cb.filter(action='delete_product'))
async def cb_delete_product(callback: types.CallbackQuery, callback_data: dict) -> None:
    """–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    db.query("DELETE FROM production WHERE id = ?", (callback_data['id'],))

    await callback.message.reply('–í—ã–±—Ä–∞–Ω–∞—è –≤–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞',
                                 reply_markup=inline.ikb.get_start_ikb())
    await callback.answer()


@dp.callback_query_handler(IsAdmin(), inline.ikb.products_correct_cb.filter(action='stop_update'),
                           state="*")
async def cb_stop_update(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.delete()
    await callback.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                                  reply_markup=inline.ikb.get_start_ikb())
    await state.finish()


@dp.callback_query_handler(IsAdmin(),
                           inline.ikb.products_correct_cb.filter(action='update_product'))
async def cb_update_product_title(callback: types.CallbackQuery, callback_data: dict,
                                  state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    await states.ProductState.edit_title.set()
    await callback.message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.',
                                 reply_markup=reply.kb.cancel_add_kb())

    await state.update_data(product_id=callback_data['id'])
    await callback.answer()


@dp.message_handler(IsAdmin(), state=states.ProductState.edit_title)
async def load_new_title(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    data = await state.get_data()

    db.query("UPDATE production SET title = ? WHERE id = ?",
             (message.text.title(), data['product_id'][0]))

    await message.answer('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.',
                         reply_markup=inline.ikb.get_edit_product_ikb(data['product_id'][0]))


@dp.callback_query_handler(IsAdmin(),
                           inline.ikb.products_correct_cb.filter(action='continue_update'),
                           state=states.ProductState.edit_title)
async def cb_update_product_ingredients(callback: types.CallbackQuery, callback_data: dict,
                                        state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    await states.ProductState.edit_ingredients.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞.',
                                  reply_markup=reply.kb.cancel_add_kb())

    await state.update_data(product_id=callback_data['id'])
    await callback.answer()


@dp.message_handler(IsAdmin(), state=states.ProductState.edit_ingredients)
async def load_new_ingredients(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    data = await state.get_data()

    db.query("UPDATE production SET ingredients = ? WHERE id = ?",
             (message.text.capitalize(), data['product_id'][0]))

    await message.answer('–ù–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
                         reply_markup=inline.ikb.get_edit_product_ikb(data['product_id'][0]))


@dp.callback_query_handler(IsAdmin(),
                           inline.ikb.products_correct_cb.filter(action='continue_update'),
                           state=states.ProductState.edit_ingredients)
async def cb_update_product_photo(callback: types.CallbackQuery, callback_data: dict,
                                  state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    await states.ProductState.edit_photo.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:',
                                  reply_markup=reply.kb.cancel_add_kb())

    await state.update_data(product_id=callback_data['id'])
    await callback.answer()


@dp.message_handler(lambda message: not message.photo, state=states.ProductState.edit_photo)
async def check_edit_photo(message: types.Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!", reply_markup=reply.kb.cancel_add_kb())


@dp.message_handler(IsAdmin(), state=states.ProductState.edit_photo, content_types=['photo'])
async def load_edit_photo(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    data = await state.get_data()

    db.query("UPDATE production SET photo = ? WHERE id = ?",
             (message.photo[0].file_id, data['product_id'][0]))

    await message.answer('–ù–æ–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.',
                         reply_markup=inline.ikb.get_edit_product_ikb(data['product_id'][0]))


@dp.callback_query_handler(IsAdmin(),
                           inline.ikb.products_correct_cb.filter(action='continue_update'),
                           state=states.ProductState.edit_photo)
async def cb_update_product_price(callback: types.CallbackQuery, callback_data: dict,
                                  state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    await states.ProductState.edit_price.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞.',
                                  reply_markup=reply.kb.cancel_add_kb())

    await state.update_data(product_id=callback_data['id'])
    await callback.answer()


@dp.message_handler(IsAdmin(), state=states.ProductState.edit_price)
async def load_new_price(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞"""
    data = await state.get_data()

    db.query("UPDATE production SET price = ? WHERE id = ?",
             (int(message.text), data['product_id'][0]))

    await message.answer('–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.',
                         reply_markup=inline.ikb.get_edit_product_ikb(data['product_id'][0]))


@dp.callback_query_handler(IsAdmin(),
                           inline.ikb.products_correct_cb.filter(action='continue_update'),
                           state=states.ProductState.edit_price)
async def cb_update_product_quantity(callback: types.CallbackQuery, callback_data: dict,
                                     state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π"""
    await states.ProductState.edit_quantity.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞.',
                                  reply_markup=reply.kb.cancel_add_kb())

    await state.update_data(product_id=callback_data['id'])
    await callback.answer()


@dp.message_handler(IsAdmin(), state=states.ProductState.edit_quantity)
async def load_new_quantity(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    data = await state.get_data()

    db.query("UPDATE production SET quantity = ? WHERE id = ?",
             (int(message.text), data['product_id'][0]))

    await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ.',
                         reply_markup=inline.ikb.get_edit_product_ikb(data['product_id'][0]))


@dp.callback_query_handler(IsAdmin(),
                           inline.ikb.products_correct_cb.filter(action='continue_update'),
                           state=states.ProductState.edit_quantity)
async def cb_update_product_confirm(callback: types.CallbackQuery, callback_data: dict,
                                    state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π"""
    await states.ProductState.edit_confirm.set()
    await callback.message.answer(
        '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (–¥–∞/–Ω–µ—Ç):',
        reply_markup=reply.kb.cancel_add_kb())

    await state.update_data(product_id=callback_data['id'])
    await callback.answer()


@dp.message_handler(IsAdmin(), state=states.ProductState.edit_confirm)
async def load_new_confirm(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    data = await state.get_data()
    content = None

    if message.text.lower() == "–¥–∞":
        content = True
    elif message.text.lower() == '–Ω–µ—Ç':
        content = False

    db.query("UPDATE production SET confirm = ? WHERE id = ?", (content, data['product_id'][0]))

    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=inline.ikb.get_start_ikb())
    await state.finish()


@dp.callback_query_handler(IsAdmin(), text='show_products')
async def show_production(callback: types.CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    products = db.fetchall('SELECT * FROM production')
    if not products:
        return await callback.answer(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å—è –Ω–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.", show_alert=True)

    await show_all_products(callback=callback, products=products)
